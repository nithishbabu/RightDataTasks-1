package com.rightdata.demo.controller;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.rightdata.demo.entity.ConnectionDetails;
import com.rightdata.demo.entity.RequestBodyPattern;
import com.rightdata.demo.entity.RequestBodyQuery;
import com.rightdata.demo.entity.TableDescription;
import com.rightdata.demo.entity.TableType;
import com.rightdata.demo.service.ConnectionService;

@RestController
@RequestMapping("/task")
public class ConnectionController {

	@Autowired
	ConnectionService service;

	@PostMapping("/connect")
	public ResponseEntity<String> connectToDb(@RequestBody ConnectionDetails cd) {

		Connection con = service.getConnection(cd);
		if (con == null)
			return new ResponseEntity<String>("Unable to connect", HttpStatus.NOT_FOUND);
		else
			return new ResponseEntity<String>("Connected successfully", HttpStatus.OK);

	}

	@PostMapping("/catalogs")
	public ResponseEntity<List<String>> getCatalogsList(@RequestBody ConnectionDetails cd) {
		List<String> cataloglist = service.getCatalogs(cd);
		return new ResponseEntity<List<String>>(cataloglist, HttpStatus.OK);
	}

	@PostMapping("/{catalog}")
	public ResponseEntity<List<String>> getSchemaslist(@RequestBody ConnectionDetails cd,
			@PathVariable String catalog) {
		List<String> schemalist = service.getSchemas(cd, catalog);
		return new ResponseEntity<List<String>>(schemalist, HttpStatus.OK);
	}

	@PostMapping("/{catalog}/{schema}")
	public ResponseEntity<List<String>> getviewsandtableslist(@RequestBody ConnectionDetails cd,
			@PathVariable String catalog, @PathVariable String schema) {
		List<String> viewsandtables = service.getViewsAndTables(cd, catalog, schema);
		return new ResponseEntity<List<String>>(viewsandtables, HttpStatus.OK);

	}
//	#task-5

	@PostMapping("/{catalog}/{schema}/{table}")
	public ResponseEntity<List<TableDescription>> getColumnProperties(@PathVariable String catalog,@PathVariable String schema, @PathVariable String table, @RequestBody ConnectionDetails details)
		{
		List<TableDescription> tableDescList = service.getTableDescription(details, catalog, schema, table);
		return new ResponseEntity<List<TableDescription>>(tableDescList, HttpStatus.OK);
		}
//	task-6
	 @PostMapping("/query")
	 public ResponseEntity<List<List<Object>>> test(@RequestBody RequestBodyQuery queryBody)
	 {ConnectionDetails deta = queryBody.getDetails();
	 String query = queryBody.getQuery();
	 List<List<Object>> tableDataList = service.getTableData(deta, query);
	 return new ResponseEntity<List<List<Object>>>(tableDataList, HttpStatus.OK);
	 }
	
	
	
//	task-7
	 @PostMapping("/search")
	 public ResponseEntity<List<TableType>> getTablesByPattern(@RequestBody RequestBodyPattern bodyPattern)
	 {
	 List<TableType> viewsAndTables = service.getTablesAndViewsByPattern(bodyPattern.getDetails(),
	 bodyPattern.getCatalog(), bodyPattern.getPattern());
	 return new ResponseEntity<List<TableType>>(viewsAndTables, HttpStatus.OK);
}
}